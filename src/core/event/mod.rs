//! # Event Handling System
//!
//! This module defines the core components of the event-driven architecture. The
//! system is designed to be modular and extensible, allowing for a clear separation
//! of concerns when processing user input and window lifecycle events.
//!
//! ## Core Concepts
//!
//! - **[`Event`]**: A platform-agnostic enum representing all possible events,
//!   such as keyboard input, mouse movements, and window actions.
//!
//! - **[`EventHandler`]**: A trait that defines a generic interface for handling
//!   events. Developers implement this trait to create custom logic for responding
//!   to user interactions and system notifications.
//!
//! - **Composition over Inheritance**: Event handling logic is built by composing
//!   multiple `EventHandler` implementations within a [`RootEventHandler`]. This
//!   promotes modularity, allowing different handlers to manage distinct
//!   responsibilities (e.g., rendering, input state tracking, application logic).
//!
//! - **State Management**: The state of input devices (like keyboard modifiers
//!   and mouse position) is tracked in dedicated structs (`InputState`, `MouseState`)
//!   and accessed via traits (`HasInputState`, `HasMouseState`). This provides a
//!   centralized and predictable way to query input state.
//!
//! ## Event Flow
//!
//! 1. The platform-specific windowing layer (e.g., Win32) captures a native OS message.
//! 2. The message is translated into a platform-agnostic [`Event`].
//! 3. The [`Event`] is passed to the top-level [`RootEventHandler`].
//! 4. The [`RootEventHandler`] dispatches the [`Event`] to its list of child handlers,
//!    allowing each one to process it in sequence.

pub mod event_handler;
pub mod event_loop;
pub mod handlers;
pub mod input_state;
pub mod key_id;

use crate::core::event::handlers::{keyboard_handler::KeyboardEvent, mouse_handler::MouseEvent};
use glam::UVec2;

/// A platform-agnostic enumeration of all possible GUI events.
///
/// This enum is the primary means of communication between the windowing backend
/// and the application logic. It encapsulates everything from window lifecycle
/// events to user input, providing a single, unified type for the event loop.
#[derive(Debug, Clone, PartialEq)]
pub enum Event {
    // --- Window Events ---
    /// The user has requested to close the window (e.g., by clicking the 'X' button).
    /// The default response is to terminate the application's message loop.
    WindowClose,

    /// The window's client area has been resized.
    ///
    /// Contains the new size of the window in physical pixels. This event is
    /// typically used to resize the renderer's swap chain.
    WindowResize(UVec2),

    // --- Keyboard Events ---
    /// A keyboard key was pressed down.
    ///
    /// This event provides the raw, platform-agnostic `KeyId` of the key. It is
    /// best used for actions that require immediate response, like game controls
    /// or application shortcuts. It may be fired multiple times if the key is
    /// held down (key repeat).
    KeyDown(KeyboardEvent),

    /// A keyboard key was released.
    ///
    /// This event complements `KeyDown` and is triggered when a key is released.
    KeyUp(KeyboardEvent),

    /// A translated character was received from the keyboard.
    ///
    /// This event should be used for text input, as it correctly handles characters
    /// generated by the OS's Input Method Editor (IME), including dead keys,
    /// accents, and complex scripts.
    Character(char),

    // --- Mouse Events ---
    /// The mouse cursor has moved over the window's client area.
    ///
    /// Contains the new coordinates of the cursor. This event can fire very
    /// frequently, so handlers should be efficient.
    MouseMove(MouseEvent),

    /// A mouse button was pressed down.
    ///
    /// Contains the state of the mouse at the moment the button was pressed.
    MouseDown(MouseEvent),

    /// A mouse button was released.
    ///
    /// Contains the state of the mouse at the moment the button was released.
    MouseUp(MouseEvent),

    /// The mouse wheel was scrolled.
    ///
    /// Contains the scroll delta. A positive value typically indicates scrolling
    /// forward (away from the user), while a negative value indicates scrolling
    /// backward (toward the user).
    MouseWheel(f32),

    // --- Rendering Events ---
    /// The window's content needs to be repainted.
    ///
    /// This event is triggered by the OS whenever the window's client area is
    /// invalid and must be redrawn (e.g., after being uncovered, resized, or
    /// explicitly invalidated). The `RenderEventHandler` is responsible for
    /// handling this event and orchestrating the drawing of a new frame.
    Paint,
}