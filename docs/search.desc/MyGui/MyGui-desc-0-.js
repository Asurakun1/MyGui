searchState.loadedDescShard("MyGui", 0, "MyGui: A Simple Windows GUI Framework\nRendering Engine\nRepresents the central state of the application.\nThe text string to be displayed in the window.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>App</code> instance with default state.\nThe scene containing all drawable objects.\nDefines the interface for handling window events.\nA catch-all method for handling any other window messages.\nCalled when the window is being destroyed (in response to …\nCalled when a key is pressed.\nCalled when a key is released.\nCalled when the left mouse button is pressed.\nCalled when the left mouse button is released.\nCalled when the mouse moves.\nCalled when the window needs to be repainted (in response …\nCalled when the window is resized (in response to <code>WM_SIZE</code>).\nRepresents a key on the keyboard.\nAn unknown key with the given virtual key code.\nReturns the argument unchanged.\nConverts a virtual key code into a <code>KeyId</code>.\nCalls <code>U::from(self)</code>.\nAn event handler that is responsible for rendering the …\nReturns the argument unchanged.\nHandles any other window messages.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RenderEventHandler</code>.\nHandles the <code>WM_DESTROY</code> message.\nHandles key down events.\nHandles key up events.\nHandles left mouse button down events.\nHandles left mouse button up events.\nHandles mouse move events.\nHandles the <code>WM_PAINT</code> message and renders the scene.\nHandles the <code>WM_SIZE</code> message.\nThe primary event handler that composes and delegates to …\nReturns the argument unchanged.\nDelegates general message handling.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RootEventHandler</code> and initializes its child …\nDelegates the <code>on_destroy</code> event.\nDelegates key down events.\nDelegates key up events.\nDelegates left mouse button down events.\nDelegates left mouse button up events.\nDelegates mouse move events.\nDelegates the <code>on_paint</code> event to the appropriate child …\nDelegates the <code>on_resize</code> event.\nDrawable Objects\nManages all Direct2D and DirectWrite resources.\nCreates resources that are tied to a specific rendering …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Direct2DContext</code> and initializes …\nA trait for objects that can be drawn to a <code>DrawingContext</code>.\nDraws the object to the given <code>DrawingContext</code>.\nA context for drawing operations.\nThe brush to use for drawing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe render target to draw to.\nThe text format to use for drawing text.\nA <code>Drawable</code> object that represents a piece of text.\nDraws the text to the render target using the provided …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TextObject</code> with the specified text and …\nThe text to be rendered.\nThe x-coordinate of the top-left corner of the text layout …\nThe y-coordinate of the top-left corner of the text layout …\nRepresents a scene containing a collection of <code>Drawable</code> …\nAdds a <code>Drawable</code> object to the scene.\nDraws all objects in the scene using the provided …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new, empty <code>Scene</code>.\nThe default font face name for the application.\nThe default font size for the application.\nThe default class name for the application window.\nThe default height for the application window.\nThe default title for the application window.\nThe default width for the application window.\nRepresents an application window.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStarts the message loop for the window.\nCreates a new application window.\nThe main window procedure (<code>wndproc</code>) for the application.")